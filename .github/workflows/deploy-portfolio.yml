name: Deploy Portfolio Website

on:
  push:
    branches: [ main ]
    paths:
      - 'portfolio/**'
      - 'website/**'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'portfolio/**'
      - 'website/**'
      - 'docs/**'
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build & Test Website
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          elif [ -f portfolio/package.json ]; then
            cd portfolio && npm ci
          elif [ -f website/package.json ]; then
            cd website && npm ci
          fi
          
      - name: Build website
        run: |
          echo "üèóÔ∏è Building portfolio website..."
          if [ -f package.json ]; then
            npm run build
          elif [ -d portfolio ]; then
            cd portfolio && npm run build
          elif [ -d website ]; then
            cd website && npm run build
          fi
          
      - name: Run tests
        run: |
          if [ -f package.json ]; then
            npm test -- --coverage --watchAll=false
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: website-build
          path: |
            dist/
            build/
            out/
            portfolio/dist/
            website/build/
            
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: website-build
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install lighthouse
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: |
          echo "üîç Running Lighthouse performance audit..."
          # Configure for static site
          lhci autorun || echo "Lighthouse completed with warnings"
          
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, lighthouse-audit]
    if: github.event_name == 'pull_request'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: website-build
          
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, lighthouse-audit]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: website-build
          
      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          
      - name: Update DNS (Cloudflare)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          if [ ! -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "üåê Updating DNS records..."
            # Add Cloudflare API calls if needed
          fi
          
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Deployment Success Notification
        if: needs.deploy-production.result == 'success'
        run: |
          echo "‚úÖ Portfolio website deployed successfully!"
          echo "üåê Live at: https://pranshudev.xyz"
          
      - name: Deployment Failure Notification
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Portfolio deployment failed!"
          echo "Please check the workflow logs for details."