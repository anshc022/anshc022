---
name: ü§ñ AI Auto Blog Writer

on:
  schedule:
    # Runs every Monday at 10:00 AM UTC (3:30 PM IST)
    - cron: '0 10 * * 1'
  workflow_dispatch:
    inputs:
      topic:
        description: 'Specific topic to write about (optional)'
        required: false
        type: string
      post_type:
        description: 'Type of post to generate'
        required: true
        default: 'tutorial'
        type: choice
        options:
          - tutorial
          - project-showcase
          - tech-insights
          - career-tips
          - ai-ml-trends

jobs:
  generate-and-publish-blog:
    name: AI Blog Content Generator
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Dependencies
        run: |
          pip install requests google-generativeai python-frontmatter \
            markdown beautifulsoup4 pillow openai

      - name: ü§ñ Generate Blog Content with Gemini AI
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          DEVTO_API_KEY: ${{ secrets.DEVTO_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > ai_blog_generator.py << 'EOF'
          import os
          import json
          import requests
          import google.generativeai as genai
          from datetime import datetime
          import random

          # Configure Gemini AI
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-1.5-flash')

          def get_github_activity():
              """Fetch recent GitHub activity for content inspiration"""
              headers = {
                  'Authorization': f'token {os.environ["GITHUB_TOKEN"]}'
              }
              
              # Get recent commits
              commits_url = (
                  'https://api.github.com/repos/anshc022/anshc022/'
                  'commits?per_page=10'
              )
              commits_response = requests.get(commits_url, headers=headers)
              commits = (
                  commits_response.json()[:5]
                  if commits_response.status_code == 200
                  else []
              )
              
              # Get repositories
              repos_url = (
                  'https://api.github.com/users/anshc022/'
                  'repos?sort=updated&per_page=10'
              )
              repos_response = requests.get(repos_url, headers=headers)
              repos = (
                  repos_response.json()[:5]
                  if repos_response.status_code == 200
                  else []
              )
              
              return {
                  'recent_commits': [c['commit']['message'] for c in commits],
                  'active_repos': [
                      {
                          'name': r['name'],
                          'description': r['description'],
                          'language': r['language']
                      }
                      for r in repos
                  ]
              }

          def generate_blog_content(post_type, topic=None):
              """Generate blog content using Gemini AI"""
              github_data = get_github_activity()
              
              # Content templates based on post type
              prompts = {
                  'tutorial': f"""
                  Write a comprehensive technical tutorial blog post for Dev.to
                  as Pranshu Chourasia (Ansh), an AI/ML Engineer and
                  Full-Stack Developer.
                  
                  Context:
                  - Recent GitHub activity: {github_data['recent_commits'][:3]}
                  - Active projects: {github_data['active_repos'][:3]}
                  - Topic focus: {topic if topic else 'Latest tech trends'}
                  
                  Requirements:
                  - Write as a knowledgeable engineer sharing insights
                  - Include code examples and step-by-step instructions
                  - Make it beginner-friendly but technically accurate
                  - Add practical tips and best practices
                  - Include relevant hashtags for Dev.to
                  - Write in a conversational, engaging tone
                  - Length: 1200-1500 words
                  
                  Structure:
                  1. Engaging introduction with a hook
                  2. Problem statement or learning objective
                  3. Step-by-step tutorial with code examples
                  4. Common pitfalls and how to avoid them
                  5. Conclusion with key takeaways
                  6. Call to action for engagement
                  
                  Format as Dev.to markdown with proper front matter.
                  """
              }
              
              response = model.generate_content(
                  prompts.get(post_type, prompts['tutorial'])
              )
              return response.text

          def generate_blog_image(title, post_type, content_snippet=""):
              """Generate a relevant image for the blog post"""
              try:
                  # Create image prompt based on blog title and type
                  image_prompts = {
                      'tutorial': f"Modern tech tutorial illustration for '{title}', clean minimalist design, programming elements, code snippets, digital art style",
                      'project-showcase': f"Professional project showcase for '{title}', sleek technology design, modern UI elements, vibrant colors",
                      'tech-insights': f"Tech insights visualization for '{title}', futuristic design, data analytics, modern technology aesthetic",
                      'career-tips': f"Professional career growth illustration for '{title}', modern workplace, success journey, motivational design",
                      'ai-ml-trends': f"AI and machine learning concept art for '{title}', neural networks, data flow, futuristic technology"
                  }
                  
                  prompt = image_prompts.get(post_type, image_prompts['tutorial'])
                  
                  # Enhanced keyword extraction from title and content
                  keywords = []
                  
                  # Extract from title
                  title_words = title.lower().replace(',', ' ').replace('.', ' ').split()
                  tech_keywords = ['ai', 'ml', 'python', 'javascript', 'react', 'nodejs', 'api', 'database', 'web', 'development', 'programming', 'code', 'tutorial', 'guide']
                  
                  for word in title_words:
                      if len(word) > 3 and word not in ['the', 'and', 'for', 'with', 'your', 'how', 'what', 'why']:
                          keywords.append(word)
                  
                  # Add tech-specific keywords
                  for keyword in tech_keywords:
                      if keyword in title.lower() or keyword in content_snippet.lower():
                          keywords.append(keyword)
                  
                  # Limit and format keywords
                  keywords = list(set(keywords))[:5]  # Remove duplicates and limit
                  search_terms = '+'.join(keywords + ['technology', 'programming'])
                  
                  # Use Unsplash API for relevant stock photos
                  unsplash_url = f"https://source.unsplash.com/1200x630/?{search_terms}"
                  
                  # Download image
                  img_response = requests.get(unsplash_url, timeout=30)
                  if img_response.status_code == 200:
                      timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                      img_filename = f"blog_image_{timestamp}.jpg"
                      
                      with open(img_filename, 'wb') as f:
                          f.write(img_response.content)
                      
                      print(f"üñºÔ∏è Generated image: {img_filename}")
                      print(f"üîç Keywords used: {', '.join(keywords)}")
                      return img_filename
                  else:
                      print("‚ö†Ô∏è Failed to generate image, using fallback")
                      return None
                      
              except Exception as e:
                  print(f"‚ùå Image generation error: {e}")
                  return None

          def upload_image_to_github(img_filename, title):
              """Upload generated image to GitHub and return URL"""
              try:
                  import base64
                  
                  # Read image file
                  with open(img_filename, 'rb') as f:
                      img_content = f.read()
                  
                  # Encode to base64
                  img_base64 = base64.b64encode(img_content).decode()
                  
                  # GitHub API to create file
                  github_path = f"blog-images/{img_filename}"
                  github_url = f"https://api.github.com/repos/anshc022/anshc022/contents/{github_path}"
                  
                  headers = {
                      'Authorization': f'token {os.environ["GITHUB_TOKEN"]}',
                      'Content-Type': 'application/json'
                  }
                  
                  data = {
                      'message': f'Add blog image for: {title}',
                      'content': img_base64,
                      'branch': 'main'
                  }
                  
                  response = requests.put(github_url, headers=headers, json=data)
                  
                  if response.status_code == 201:
                      download_url = response.json()['content']['download_url']
                      print(f"üì§ Image uploaded to GitHub: {download_url}")
                      return download_url
                  else:
                      print(f"‚ùå Failed to upload image: {response.status_code}")
                      return None
                      
              except Exception as e:
                  print(f"‚ùå Image upload error: {e}")
                  return None

          def add_image_to_content(content, image_url, title):
              """Add image to blog content"""
              if not image_url:
                  return content
              
              # Find a good place to insert the image (after title/intro)
              lines = content.split('\n')
              image_markdown = f"\n![{title}]({image_url})\n*Generated cover image for this blog post*\n"
              
              # Insert after the first heading or front matter
              insert_index = 0
              for i, line in enumerate(lines):
                  if line.startswith('# ') and i > 5:  # Skip front matter
                      insert_index = i + 1
                      break
                  elif line.startswith('## ') and i > 5:
                      insert_index = i
                      break
              
              if insert_index > 0:
                  lines.insert(insert_index, image_markdown)
              else:
                  # Fallback: add after potential front matter
                  lines.insert(10, image_markdown)
              
              return '\n'.join(lines)

          def publish_to_devto(content, post_type="tutorial"):
              """Publish content to Dev.to"""
              # Extract title from content
              lines = content.split('\n')
              title = "Auto-Generated Tech Insights"
              
              for line in lines[:10]:
                  if line.startswith('# '):
                      title = line.replace('# ', '').strip()
                      break
                  elif 'title:' in line:
                      title = line.split('title:')[-1].strip().strip('"\'')
                      break
              
              # Dynamic tags based on post type (max 4 tags)
              tag_map = {
                  'tutorial': ["tutorial", "programming", "webdev", "learning"],
                  'project-showcase': ["project", "showcase", "coding", "development"],
                  'tech-insights': ["tech", "insights", "trends", "programming"],
                  'career-tips': ["career", "advice", "programming", "growth"],
                  'ai-ml-trends': ["ai", "machinelearning", "trends", "tech"]
              }
              
              tags = tag_map.get(post_type, ["programming", "webdev", "tutorial", "tech"])
              
              # Prepare Dev.to article data
              article_data = {
                  "article": {
                      "title": title,
                      "published": True,
                      "body_markdown": content,
                      "tags": tags,
                      "canonical_url": "",
                      "description": (
                          "AI-generated tech insights and tutorials from "
                          "Pranshu Chourasia (Ansh)"
                      )
                  }
              }
              
              headers = {
                  'api-key': os.environ['DEVTO_API_KEY'],
                  'Content-Type': 'application/json'
              }
              
              response = requests.post(
                  'https://dev.to/api/articles',
                  headers=headers,
                  data=json.dumps(article_data)
              )
              
              if response.status_code == 201:
                  article_info = response.json()
                  print(f"‚úÖ Successfully published: {article_info['url']}")
                  return article_info['url']
              else:
                  error_msg = (
                      f"‚ùå Failed to publish: {response.status_code} - "
                      f"{response.text}"
                  )
                  print(error_msg)
                  return None

          # Main execution
          if __name__ == "__main__":
              import sys
              
              post_type = os.environ.get('INPUT_POST_TYPE', 'tutorial')
              topic = os.environ.get('INPUT_TOPIC', '')
              
              print(f"ü§ñ Generating {post_type} blog post...")
              if topic:
                  print(f"üìù Topic: {topic}")
              
              try:
                  content = generate_blog_content(post_type, topic)
                  print("‚úÖ Content generated successfully!")
                  
                  # Extract title for image generation
                  title = "AI Generated Tech Content"
                  lines = content.split('\n')
                  for line in lines[:15]:
                      if line.startswith('# '):
                          title = line.replace('# ', '').strip()
                          break
                      elif 'title:' in line:
                          title = line.split('title:')[-1].strip().strip('"\'')
                          break
                  
                  # Generate relevant image
                  print("üñºÔ∏è Generating relevant image...")
                  content_snippet = ' '.join(content.split()[:100])  # First 100 words for context
                  img_filename = generate_blog_image(title, post_type, content_snippet)
                  
                  # Upload image to GitHub and get URL
                  image_url = None
                  if img_filename:
                      print("üì§ Uploading image to GitHub...")
                      image_url = upload_image_to_github(img_filename, title)
                  
                  # Add image to content
                  if image_url:
                      print("üé® Adding image to blog content...")
                      content = add_image_to_content(content, image_url, title)
                  
                  # Save content locally for review
                  timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                  filename = f"generated_blog_{timestamp}.md"
                  with open(filename, 'w', encoding='utf-8') as f:
                      f.write(content)
                  print(f"üíæ Content saved to {filename}")
                  
                  # Publish to Dev.to
                  article_url = publish_to_devto(content, "tech-insights")
                  if article_url:
                      print("üéâ Blog post published successfully!")
                      print(f"üîó URL: {article_url}")
                      
                      # Update workflow summary
                      summary_lines = [
                          "## ü§ñ AI Blog Generator Results",
                          "",
                          "‚úÖ **Successfully generated and published blog post!**",
                          "",
                          f"- **Type:** {post_type}",
                          f"- **Topic:** {topic if topic else 'Auto-selected'}",
                          f"- **Title:** {title}",
                          f"- **Published URL:** {article_url}",
                          f"- **Cover Image:** {'‚úÖ Generated & Included' if image_url else '‚ùå Not generated'}",
                          f"- **Generated at:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}",
                          "",
                          "### üìä Stats",
                          f"- Content length: ~{len(content.split())} words",
                          f"- Image URL: {image_url if image_url else 'None'}",
                          "- Generated by: Gemini AI",
                          "- Auto-published to Dev.to"
                      ]
                      summary_content = "\\n".join(summary_lines)
                      with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
                          f.write(summary_content)
                  else:
                      print("‚ùå Failed to publish to Dev.to")
                      
              except Exception as e:
                  print(f"‚ùå Error: {str(e)}")
                  sys.exit(1)
          EOF

          python ai_blog_generator.py

      - name: üìù Commit Generated Content
        run: |
          git config --local user.email "anshc022@gmail.com"
          git config --local user.name "Pranshu Chourasia (Ansh)"
          git add generated_blog_*.md || true
          git diff --staged --quiet || \
            git commit -m "ü§ñ AI Blog - $(date '+%Y-%m-%d')" || true
          git push || true

      - name: üìä Update Blog Stats
        run: |
          echo "üéâ AI Blog completed at $(date)" >> blog_generation_log.txt
          git add blog_generation_log.txt || true
          git commit -m "üìä Updated blog stats" || true
          git push || true
